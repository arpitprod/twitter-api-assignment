{"version":3,"sources":["context/history.js","utils/apiCaller.js","components/SearchTwitter.js","App.js","serviceWorker.js","index.js"],"names":["HistoryContext","createContext","HistoryProvider","Provider","Consumer","API_URL","apiCaller","endpoint","a","method","options","headers","Accept","fetch","response","json","App","props","callApi","endPoint","history","push","setState","reload","then","data","statuses","timeLimit","clock","intervalID","setInterval","state","timeoutID","setTimeout","callApiFunc","clearInterval","searchValue","handleSearchSubmit","e","preventDefault","this","Row","Col","sm","className","Card","body","size","offset","Form","onSubmit","FormGroup","Input","type","name","id","value","onChange","target","Button","color","aria-hidden","length","map","obj","i","lg","key","Media","height","left","object","src","user","profile_image_url","alt","heading","screen_name","created_at","description","React","Component","createBrowserHistory","basename","process","exact","path","component","SearchTwitter","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2726aea2.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const HistoryContext = createContext(null);\n\nexport const HistoryProvider = HistoryContext.Provider\nexport const HistoryConsumer = HistoryContext.Consumer\nexport default HistoryContext;\n","\nconst API_URL = 'https://aravindtwitter.herokuapp.com/twittersearch?key';\n\nexport default async function apiCaller(endpoint, method = 'get', body = {}, authorization = false) {\n  let headers = {\n    Accept: 'application/json'\n  };\n  let options = {\n    headers,\n    method\n  };\n\n  try {\n    const response = await fetch(`${API_URL}=${endpoint}`, options);\n    return response.json();\n  } catch (error) {\n    return error;\n\t}\n\n}\n","import React from 'react';\nimport apiCaller from '../utils/apiCaller';\nimport {\n  Card, Form, FormGroup, Input, Button, Row, Col, Media\n} from 'reactstrap';\nimport LazyLoad from 'react-lazyload';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsearchValue: '',\n\t\t\tdata: {},\n\t\t\treload: true\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.callApi();\n\t}\n\n\tcallApi = (endPoint = 'adobe') => {\n\t\tthis.props.history.push(`/key=${endPoint}`);\n\t\tthis.setState({\n\t\t\treload: true\n\t\t});\n\t\tapiCaller(endPoint)\n\t\t.then(data => {\n\t\t\tthis.setState({\n\t\t\t\tdata: data.statuses,\n\t\t\t\treload: false,\n\t\t\t\ttimeLimit: 30\n\t\t\t}, this.clock);\n\t\t})\n\t}\n\n\tclock = () => {\n\t\tthis.intervalID = setInterval(() => {\n\t\t\tthis.setState({timeLimit: this.state.timeLimit - 1});\n\t\t}, 1000);\n\t\tthis.timeoutID = setTimeout(() => {\n\t\t\tthis.callApiFunc();\n\t\t\tthis.setState({timeLimit: 30});\n\t\t}, 30000);\n\t}\n\n\tcallApiFunc = () => {\n\t\tclearInterval(this.intervalID);\n\t\tclearInterval(this.timeoutID);\n\t\tthis.setState({timeLimit: 30});\n\t\tconst { searchValue } = this.state;\n\t\tif (searchValue !== '') {\n\t\t\tthis.callApi(searchValue);\n\t\t} else {\n\t\t\tthis.callApi();\n\t\t}\n\t}\n\n\thandleSearchSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.callApiFunc();\n\t}\n\n\trender() {\n\t\tconst { reload, searchValue, data, timeLimit } = this.state;\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col sm=\"12\">\n\t\t\t\t\t\t<div className='searchTwitter'>\n\t\t\t\t\t\t\tSearch @ Twitter\n\t\t\t\t\t\t\t<div className='rightSide'>\n\t\t\t\t\t\t\t\tAuto refresh in {timeLimit} seconds\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Card body>\n\t\t\t\t\t\t<Col sm={{ size: 8, offset: 2 }}>\n\t\t\t\t\t\t\t<Form onSubmit={this.handleSearchSubmit}>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Col sm=\"10\">\n\t\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\" name=\"search\" id=\"search\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={searchValue}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => this.setState({searchValue: e.target.value})}\n\t\t\t\t\t\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t<Col sm=\"2\">\n\t\t\t\t\t\t\t\t\t\t\t<Button color=\"primary\">Search</Button>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Card>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t{!reload ?\n\t\t\t\t\tdata.length > 0 ?\n\t\t\t\t\t\t<Col sm=\"12\">\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t{data.map((obj, i) => (\n\t\t\t\t\t\t\t\t\t<Col sm=\"12\" lg=\"6\" key={i}>\n\t\t\t\t\t\t\t\t\t\t<Card body className='shadow mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t<Media>\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoad height={200}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Media left>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Media object src={obj.user.profile_image_url} alt=\"Profile Pic\" className='profilePic' />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Media>\n\t\t\t\t\t\t\t\t\t\t\t\t</LazyLoad>\n\t\t\t\t\t\t\t\t\t\t\t\t<LazyLoad height={100} offset={100}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Media body>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Media heading>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{`${obj.user.name}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='tweetLocation'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{` @${obj.user.screen_name} ${obj.user.created_at}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Media>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{obj.user.description}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Media>\n\t\t\t\t\t\t\t\t\t\t\t\t</LazyLoad>\n\t\t\t\t\t\t\t\t\t\t\t</Media>\n\t\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t<Col sm=\"12\">\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col sm={{ size: 4, offset: 3 }}>\n\t\t\t\t\t\t\t\t\t\tNo Data\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t:\n\t\t\t\t\t<Col sm={{ offset: 5 }}>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<i className=\"fa fa-refresh fa-spin fa-3x fa-fw reloadIcon\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Col>\n\t\t\t\t\t}\n\t\t\t\t</Row>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport { Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { HistoryProvider } from './context/history';\n\n// Pages\nimport SearchTwitter from './components/SearchTwitter';\n\nimport { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\n\nclass App extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<HistoryProvider value={{history}}>\n\t\t\t\t<Router history={history} basename={process.env.PUBLIC_URL}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/key=:searchValue\" component={SearchTwitter} />\n\t\t\t\t\t\t<Redirect exact from=\"/\" to=\"/key=adobe\" />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Router>\n\t\t\t</HistoryProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}